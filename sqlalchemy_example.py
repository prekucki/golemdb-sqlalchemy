#!/usr/bin/env python3
"""SQLAlchemy dialect usage example with schema introspection."""

import os
import sys
import logging
from pathlib import Path
from dotenv import load_dotenv

def main():
    """Demonstrate SQLAlchemy dialect usage with GolemBase."""
    
    # Configure logging
    logging.basicConfig(
        level=logging.INFO,
        format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
        handlers=[logging.StreamHandler(sys.stdout)]
    )
    
    print("üîß SQLAlchemy GolemBase Dialect Example")
    print("=" * 50)
    
    # Load environment variables
    load_dotenv()
    
    # Get configuration from environment
    private_key = os.getenv('PRIVATE_KEY')
    rpc_url = os.getenv('RPC_URL', 'https://ethwarsaw.holesky.golemdb.io/rpc')
    ws_url = os.getenv('WS_URL', 'wss://ethwarsaw.holesky.golemdb.io/rpc/ws')
    app_id = os.getenv('APP_ID', 'sqlalchemy_demo')
    schema_id = os.getenv('SCHEMA_ID', 'sqlalchemy_test_schema')
    
    if not private_key:
        print("‚ùå PRIVATE_KEY not found in environment variables")
        print("Please set PRIVATE_KEY in your .env file")
        sys.exit(1)
    
    try:
        from sqlalchemy import create_engine, MetaData, Table, Column, Integer, String, Boolean, DateTime, inspect
        from sqlalchemy.sql import text
        
        print("‚úÖ SQLAlchemy imported successfully")
        
        # Create engine with GolemBase dialect
        connection_url = (
            f"golembase:///{schema_id}"
            f"?rpc_url={rpc_url}"
            f"&ws_url={ws_url}"
            f"&private_key={private_key}"
            f"&app_id={app_id}"
        )
        
        print(f"üîó Connecting to GolemBase via SQLAlchemy...")
        print(f"üì° RPC URL: {rpc_url}")
        print(f"üîå WS URL: {ws_url}")
        print(f"üè∑Ô∏è  App ID: {app_id}")
        print(f"üìã Schema ID: {schema_id}")
        
        engine = create_engine(connection_url, echo=True)  # echo=True shows SQL queries
        
        print("‚úÖ SQLAlchemy Engine created successfully!")
        
        # Test basic connection
        with engine.connect() as conn:
            print("\nüìã Testing Schema Introspection via SQLAlchemy...")
            
            # Test SHOW TABLES through SQLAlchemy
            print("\n1. Testing SHOW TABLES through SQLAlchemy...")
            try:
                result = conn.execute(text("SHOW TABLES"))
                tables = result.fetchall()
                print(f"   ‚úÖ Found {len(tables)} tables:")
                for table in tables:
                    print(f"     - {table[0]}")
            except Exception as e:
                print(f"   ‚ö†Ô∏è SHOW TABLES failed: {e}")
            
            # Test DESCRIBE through SQLAlchemy  
            print("\n2. Testing DESCRIBE through SQLAlchemy...")
            try:
                result = conn.execute(text("DESCRIBE users"))
                columns = result.fetchall()
                print(f"   ‚úÖ Users table has {len(columns)} columns:")
                print("     Field              Type              Null  Key  Default  Extra")
                print("     " + "-" * 70)
                for col in columns:
                    field = str(col[0]).ljust(18)
                    type_str = str(col[1]).ljust(18)
                    null_str = str(col[2]).ljust(5)
                    key_str = str(col[3] or '').ljust(4)
                    default_str = str(col[4] or '').ljust(8)
                    extra_str = str(col[5] or '')
                    print(f"     {field} {type_str} {null_str} {key_str} {default_str} {extra_str}")
            except Exception as e:
                print(f"   ‚ö†Ô∏è DESCRIBE users failed: {e}")
                print("   (This is expected if the users table doesn't exist yet)")
        
        # Test SQLAlchemy reflection (uses our introspection internally)
        print("\n3. Testing SQLAlchemy Reflection...")
        try:
            inspector = inspect(engine)
            
            # Get table names through reflection
            table_names = inspector.get_table_names()
            print(f"   ‚úÖ Reflection found {len(table_names)} tables:")
            for table_name in table_names:
                print(f"     - {table_name}")
                
                # Get column info for each table
                try:
                    columns = inspector.get_columns(table_name)
                    print(f"       Columns: {len(columns)} found")
                    for col in columns[:3]:  # Show first 3 columns
                        print(f"         - {col['name']}: {col['type']}")
                    if len(columns) > 3:
                        print(f"         ... and {len(columns) - 3} more")
                except Exception as e:
                    print(f"       ‚ö†Ô∏è Could not reflect columns: {e}")
                    
        except Exception as e:
            print(f"   ‚ö†Ô∏è SQLAlchemy reflection failed: {e}")
        
        # Demonstrate ORM-style table definition
        print("\n4. Testing ORM-Style Table Definition...")
        try:
            metadata = MetaData()
            
            # Define a sample table
            sample_table = Table(
                'sqlalchemy_sample',
                metadata,
                Column('id', Integer, primary_key=True),
                Column('name', String(100), nullable=False),
                Column('email', String(255), nullable=False),
                Column('active', Boolean, default=True),
                Column('created_at', DateTime)
            )
            
            print("   ‚úÖ Table definition created")
            print(f"   Table: {sample_table.name}")
            print("   Columns:")
            for col in sample_table.columns:
                print(f"     - {col.name}: {col.type} (nullable={col.nullable})")
            
            # Note: We don't actually create the table here to avoid side effects
            print("   üí° Use metadata.create_all(engine) to create tables")
            
        except Exception as e:
            print(f"   ‚ö†Ô∏è Table definition failed: {e}")
        
        print("\n‚ú® SQLAlchemy GolemBase Dialect Example completed successfully!")
        print("\nüéØ Key Features Demonstrated:")
        print("   ‚úÖ SQLAlchemy engine creation with GolemBase URL")
        print("   ‚úÖ Direct SQL execution through SQLAlchemy")
        print("   ‚úÖ SHOW TABLES command integration")
        print("   ‚úÖ DESCRIBE command integration")
        print("   ‚úÖ SQLAlchemy reflection capabilities")
        print("   ‚úÖ ORM-style table definitions")
        print("\nüí° The dialect enables full SQLAlchemy compatibility with GolemBase!")
        
    except ImportError as e:
        print(f"‚ùå Import error: {e}")
        print("Make sure sqlalchemy-golembase is installed")
        sys.exit(1)
    except Exception as e:
        print(f"‚ùå Error: {e}")
        print(f"Error type: {type(e).__name__}")
        sys.exit(1)

if __name__ == "__main__":
    main()