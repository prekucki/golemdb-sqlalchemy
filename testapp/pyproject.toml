[tool.poetry]
name = "golembase-testapp"
version = "0.1.0"
description = "Test application for SQLAlchemy GolemBase dialect"
authors = ["Your Name <your.email@example.com>"]
readme = "README.md"
license = "MIT"
packages = [
    { include = "testapp", from = "src" },
]

[tool.poetry.dependencies]
python = ">=3.10,<4.0"
# Use the local dialect package in development
sqlalchemy-dialects-golembase = {path = "../", develop = true}
# Direct dependency on golemdb-sql subproject
golemdb-sql = {path = "../golemdb_sql", develop = true}
fastapi = "^0.109"
uvicorn = {extras = ["standard"], version = "^0.27"}
pydantic = "^2.5"
SQLAlchemy = ">=1.4.0,<3.0"
python-dotenv = "^1.0.0"

[tool.poetry.group.dev.dependencies]
pytest = ">=7.0"
pytest-asyncio = "^0.23"
httpx = "^0.26"
ruff = "^0.1.9"
mypy = "^1.8"

[build-system]
requires = ["poetry-core"]
build-backend = "poetry.core.masonry.api"

[tool.pytest.ini_options]
testpaths = ["tests"]
python_files = "test_*.py"
python_functions = "test_*"

[tool.ruff]
target-version = "py310"
line-length = 88
select = [
    "E",  # pycodestyle errors
    "W",  # pycodestyle warnings
    "F",  # pyflakes
    "I",  # isort
    "B",  # flake8-bugbear
    "C4", # flake8-comprehensions
    "UP", # pyupgrade
]
ignore = [
    "E501",  # line too long, handled by formatter
    "B008",  # do not perform function calls in argument defaults
    "C901",  # too complex
]

[tool.ruff.format]
quote-style = "double"
indent-style = "space"
skip-magic-trailing-comma = false
line-ending = "auto"

[tool.ruff.isort]
known-third-party = ["sqlalchemy", "fastapi", "pydantic", "pytest", "golem_base_sdk"]

[tool.mypy]
python_version = "3.10"
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = true
disallow_incomplete_defs = true
check_untyped_defs = true
disallow_untyped_decorators = true
no_implicit_optional = true
warn_redundant_casts = true
warn_unused_ignores = true
warn_no_return = true
warn_unreachable = true
strict_equality = true